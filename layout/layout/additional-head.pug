- var without_index = url.replace('index.html', '')
- var without_html = without_index.replace('.html', '')
- var photo_check = page.cover || theme.avatar
- var photo_link = url_check (photo_check) ? photo_check : config.url + photo_check

meta(http-equiv="x-dns-prefetch-control" content="on")
if theme.canonical
  link(rel="canonical" href=without_html)

if theme.twitter_meta
  meta(name="twitter:card" content="summary_large_image")
  meta(name="twitter:title" content=pageTitle_no_include_blog_name)
  meta(name="twitter:description" content=pageDescription)
  meta(name="twitter:image" content=photo_link)

if theme.Open_Graph_meta
  if is_post()
    meta(property="og:type" content="article")
  else
    meta(property="og:type" content="website")

  meta(property="og:title" content=pageTitle_no_include_blog_name)
  meta(property="og:url" content=without_html)
  meta(property="og:site_name" content=config.title)
  meta(property="og:description" content=pageDescription)
  meta(property="og:image" content=photo_link)

if theme.disable_baidu_transformation
  meta(http-equiv="Cache-Control" content="no-transform")
  meta(http-equiv="Cache-Control" content="no-siteapp")

if is_post()
  if(page.prev)
    link(rel="prev" title=page.prev.title href=url_for(page.prev.permalink) )
  if(page.next)
    link(rel="next" title=page.next.title  href=url_for(page.next.permalink) )


if theme.algolia_search.enable
  link(rel="dns-prefetch" href="https://cdn.jsdelivr.net")
  link(rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css")
  script(src="https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js" defer)

if (theme.gitalk && theme.gitalk.enable)
  link(rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css")
  if(theme.gitalk.js)
    script(src=theme.gitalk.js)
  else
    script(src="https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js")
  script(src="https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js")



if (theme.pwa && theme.pwa.enable)
  link(rel="manifest" href=theme.pwa.manifest)
  if(theme.pwa.theme_color) 
    meta(name="theme-color" content=theme.pwa.theme_color)
  if(theme.pwa.theme_color) 
    meta(name="msapplication-TileColor" content=theme.pwa.theme_color)
  if(theme.pwa.apple_touch_icon) 
    link(rel="apple-touch-icon" sizes="180x180" href=theme.pwa.apple_touch_icon)
  if(theme.pwa.favicon_32_32)
    link(rel="icon" type="image/png" sizes="32x32" href=theme.pwa.favicon_32_32)
  if(theme.pwa.favicon_16_16)
    link(rel="icon" type="image/png" sizes="16x16" href=theme.pwa.favicon_16_16)
  if(theme.pwa.mask_icon)
    link(rel="mask-icon" href=theme.pwa.mask_icon color="#5bbad5")


if theme.baidu_analytics
  link(rel="dns-prefetch" href="https://hm.baidu.com")
  script.
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "https://hm.baidu.com/hm.js?!{theme.baidu_analytics}";
      var s = document.getElementsByTagName("script")[0]; 
      s.parentNode.insertBefore(hm, s);
    })();
if theme.google_analytics
  link(rel="dns-prefetch" href="https://www.google-analytics.com")
  script.
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', '!{theme.google_analytics}', 'auto');
    ga('send', 'pageview');

if theme.google_site_verification
  meta(name="google-site-verification" content=theme.google_site_verification)

if theme.bing_site_verification
  meta(name="msvalidate.01" content=theme.bing_site_verification)

if theme.baidu_site_verification
  meta(name="baidu-site-verification" content=theme.baidu_site_verification)

if theme.qihu_site_verification
  meta(name="360-site-verification" content=theme.qihu_site_verification)


- var preload_archive_img = theme.archive_img ||theme.top_img || config.top_img
- var preload_img = page.top_img || theme.top_img || config.top_img

if (is_archive() && preload_archive_img) 
  link(rel="preload" href=url_for(preload_archive_img)  as="image" )
else if (!is_post() && preload_img)
  link(rel="preload" href=url_for(preload_img)  as="image" )


//- config.pug
-
  var algolia = 'undefined';
  var env = process.env;
  if (theme.algolia_search.enable) {
    algolia = JSON.stringify({
      appId: env.ALGOLIA_APP_ID || config.algolia.appId || config.algolia.applicationID,
      apiKey: env.ALGOLIA_API_KEY || config.algolia.apiKey,
      indexName: env.ALGOLIA_INDEX_NAME || config.algolia.indexName,
      hits: theme.algolia_search.hits,
      // search languages
      languages: {
        input_placeholder: _p("algolia_search.input_placeholder"),
        hits_empty: _p("algolia_search.hits_empty"),
        hits_stats: _p("algolia_search.hits_stats")
      }
    })
  } 
  
  var localSearch = 'undefined';
  if (theme.local_search && theme.local_search.enable) {
    localSearch = JSON.stringify({
      path: config.search.path,
      languages: {
        // search languages
        hits_empty: _p("local_search.hits_empty")
      }
    })
  }
  var translate = 'undefined';
  if (theme.translate && theme.translate.enable){
    var defaultEncoding;
    translate = JSON.stringify({
      defaultEncoding: theme.translate.defaultEncoding,
      translateDelay: theme.translate.translateDelay,
      cookieDomain: theme.translate.cookieDomain,
      msgToTraditionalChinese: theme.translate.msgToTraditionalChinese,
      msgToSimplifiedChinese: theme.translate.msgToSimplifiedChinese
    })
  }

script.
  var GLOBAL_CONFIG = { 
    root: '!{config.root}',
    algolia: !{algolia},
    localSearch: !{localSearch},
    translate: !{translate},
    highlight_copy: '!{theme.highlight_copy}',
    copy: {
      success: '!{_p("copy.success")}',
      error: '!{_p("copy.error")}',
      noSupport: '!{_p("copy.noSupport")}'
    },
    bookmark: {
      title: '!{_p("bookmark.title")}',
      message_prev: '!{_p("bookmark.message_prev")}',
      message_next: '!{_p("bookmark.message_next")}'
    },
    runtime_unit: '!{_p("runtime_unit")}'
  }

